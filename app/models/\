class Proposal < ApplicationRecord
  belongs_to :user
  belongs_to :site
  delegate :publisher, to: :site, allow_nil: false
  include PgSearch
  mount_uploader :support_doc, SupportUploader
  default_scope -> { order(created_at: :desc) }
  validates :user_id, presence: true
  validates :site_id, presence: true

  validates :summary, presence: true, length: { maximum: 200 }
  # lead time: weeks. Flight length: days
  validates :lead_time, :flight_length, :est_reach, :min_price, :max_price, presence: true
  validate :support_doc_size

  validates_inclusion_of :integration, in: Choices['integration']
  validates_inclusion_of :p_objective, in: Choices['objectives'].map { |o| o['name'] }
  validate :types_check
  validate :categories_check
  validate :indicators_check

  serialize :types
  serialize :categories
  serialize :p_indicators

  private

  def support_doc_size
    if support_doc.size > 20.megabytes
      errors.add(:support_doc, "should be less than 20MB")
    end
  end

  def types_check
    if types != nil
      types.each do |t|
        errors.add(:types, "#{t} is not a valid type") unless Choices['types'].include? t
      end
    end
  end

  def categories_check
    if categories != nil
      categories.each do |c|
        errors.add(:categories, "#{c} is not a valid category") unless Choices['categories'].include? c
      end
    end
  end

  def indicators_check
    if p_indicators != nil && p_objective != nil
      p_indicators.each do |i|
        errors.add(:indicators, "#{i} is not a valid indicator for given objective") unless Choices['objectives'].select{ |o| o['name'] == self.p_objective }[0]['kpis'].include? i
      end
    end
  end
end
